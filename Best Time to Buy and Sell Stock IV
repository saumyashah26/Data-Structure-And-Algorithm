//You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

//Find the maximum profit you can achieve. You may complete at most k transactions.
//Time Complexity O(n*k) and Space Complexity O(n*k)(Best is O(k) ) where n=p.size()

class Solution {
    
    int solve(vector<int> &p,int k,int i,int buy,vector<vector<vector<int> > > &dp){
        if(k<=0 || i>=p.size()) return 0;
        if(dp[i][k][buy]!=-1) return dp[i][k][buy];
        if(buy){
            dp[i][k][buy]=max(p[i]+solve(p,k-1,i+1,0,dp) , solve(p,k,i+1,1,dp));
            return dp[i][k][buy];
        }else{
            dp[i][k][buy]=max(-p[i] + solve(p,k,i+1,1,dp) , solve(p,k,i+1,0,dp));
            return dp[i][k][buy];
        }
    }
    
    
public:
    int maxProfit(int k, vector<int>& p) {
        vector<vector<vector<int> > > dp(p.size()+1,vector<vector<int> > (k+1,vector<int> (2,-1)));
        return solve(p,k,0,0,dp);
    }
};
